# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]

jobs:
  CI:
    env:
      working-directory: ./BarkingCat
      DB_URL: spring.datasource.url=${{secrets.DB_URL}}
      DB_ID: spring.datasource.username=${{secrets.DB_ID}}
      DB_PW: spring.datasource.password=${{secrets.DB_PW}}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        # The port of host
        host port: 3306
        container port: 3306
        character set server: utf8mb4
        collation server: utf8mb4_general_ci
        mysql version: latest
        mysql root password: spring.datasource.password=${{secrets.DB_PW}}
        mysql database: spring.datasource.url=${{secrets.DB_URL}}        
    - name: Grant execute permission for gradlew
      run: chmod +x BarkingCat/gradlew
    - name: Build with Gradle
      run: |
        cd BarkingCat
        sudo ./gradlew build
    - name: Build Docker Image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: rkdals213/barking-cat
        tags: latest
        registry: docker.io
        username: ${{ secrets.DOCKER_ID }}
        password: ${{ secrets.DOCKER_PW }}

    
    
    
        
  deploy:
    needs: CI
    name: Deploy
    runs-on: [ self-hosted ]
    steps:
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PW }}
      - name: Docker run
        run: |
          docker stop barking-cat && docker rm -fv barking-cat
          docker rmi -f rkdals213/barking-cat
          docker run -d -p 8080:8080 --name barking-cat --restart always rkdals213/barking-cat:latest
